{"ast":null,"code":"//incharege updating and controlling the todo state\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  const response = await fetch(\"http://localhost:8000/todos\");\n\n  if (response.ok) {\n    const todos = await response.json(); //array of todos that converts to json\n\n    return {\n      todos\n    }; //once a function that will turn back to action\n  }\n});\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [{\n    id: 1,\n    title: \"todo1\",\n    completed: false\n  }, {\n    id: 2,\n    title: \"todo2\",\n    completed: false\n  }, {\n    id: 3,\n    title: \"todo3\",\n    completed: true\n  }],\n  reducers: {\n    //updates the current state to the new state\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: true\n      }; //state as params that will add new todo to the arrays\n\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id === action.payload.id);\n    }\n  },\n  extraReducers: {\n    //thunk will dispatech a fullfilled action that will be handled by the reducer function\n    [getTodosAsync.fulfilled]: (state, action) => {\n      return action.payload.todos;\n    }\n  }\n}); //returns bunch of action right off the actions objects\n\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions; //to add it to the store\n\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/Users/avinavshrestha/Desktop/react-redux-todo-app/starter/src/components/redux/todoSlice.js"],"names":["createSlice","createAsyncThunk","getTodosAsync","response","fetch","ok","todos","json","todoSlice","name","initialState","id","title","completed","reducers","addTodo","state","action","newTodo","Date","now","payload","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","extraReducers","fulfilled","actions","reducer"],"mappings":"AAAA;AAEA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,aAAa,GAAGD,gBAAgB,CAAC,qBAAD,EAAwB,YAAY;AACxE,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;;AACA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAApB,CADe,CACsB;;AACrC,WAAO;AAAED,MAAAA;AAAF,KAAP,CAFe,CAEG;AACnB;AACF,CANqC,CAAtC;AAQA,MAAME,SAAS,GAAGR,WAAW,CAAC;AAC5BS,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,CACZ;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,SAAS,EAAE;AAApC,GADY,EAEZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,SAAS,EAAE;AAApC,GAFY,EAGZ;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,SAAS,EAAE;AAApC,GAHY,CAFc;AAQ5BC,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAG;AACdP,QAAAA,EAAE,EAAEQ,IAAI,CAACC,GAAL,EADU;AAEdR,QAAAA,KAAK,EAAEK,MAAM,CAACI,OAAP,CAAeT,KAFR;AAGdC,QAAAA,SAAS,EAAE;AAHG,OAAhB,CAD0B,CAM1B;;AACAG,MAAAA,KAAK,CAACM,IAAN,CAAWJ,OAAX;AACD,KAVO;AAYRK,IAAAA,cAAc,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMO,KAAK,GAAGR,KAAK,CAACS,SAAN,CAAiBC,IAAD,IAAUT,MAAM,CAACI,OAAP,CAAeV,EAAzC,CAAd;AACAK,MAAAA,KAAK,CAACQ,KAAD,CAAL,CAAaX,SAAb,GAAyBI,MAAM,CAACI,OAAP,CAAeR,SAAxC;AACD,KAfO;AAgBRc,IAAAA,UAAU,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOD,KAAK,CAACY,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAACf,EAAL,KAAYM,MAAM,CAACI,OAAP,CAAeV,EAAlD,CAAP;AACD;AAlBO,GARkB;AA6B5BkB,EAAAA,aAAa,EAAE;AACX;AACA,KAAC3B,aAAa,CAAC4B,SAAf,GAA2B,CAACd,KAAD,EAAQC,MAAR,KAAmB;AAC1C,aAAOA,MAAM,CAACI,OAAP,CAAef,KAAtB;AACH;AAJU;AA7Ba,CAAD,CAA7B,C,CAsCA;;AACA,OAAO,MAAM;AAAES,EAAAA,OAAF;AAAWQ,EAAAA,cAAX;AAA2BI,EAAAA;AAA3B,IAA0CnB,SAAS,CAACuB,OAA1D,C,CAEP;;AACA,eAAevB,SAAS,CAACwB,OAAzB","sourcesContent":["//incharege updating and controlling the todo state\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nconst getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  const response = await fetch(\"http://localhost:8000/todos\");\n  if (response.ok) {\n    const todos = await response.json(); //array of todos that converts to json\n    return { todos }; //once a function that will turn back to action\n  }\n});\n\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [\n    { id: 1, title: \"todo1\", completed: false },\n    { id: 2, title: \"todo2\", completed: false },\n    { id: 3, title: \"todo3\", completed: true },\n  ],\n\n  reducers: {\n    //updates the current state to the new state\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: true,\n      };\n      //state as params that will add new todo to the arrays\n      state.push(newTodo);\n    },\n\n    toggleComplete: (state, action) => {\n      const index = state.findIndex((todo) => action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter((todo) => todo.id === action.payload.id);\n    },\n  },\n\n  extraReducers: {\n      //thunk will dispatech a fullfilled action that will be handled by the reducer function\n      [getTodosAsync.fulfilled]: (state, action) => {\n          return action.payload.todos;\n      }\n  }\n\n});\n\n//returns bunch of action right off the actions objects\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\n\n//to add it to the store\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}