{"ast":null,"code":"//incharege updating and controlling the todo state\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"; //the thunk function gets called by an component\n\nexport const getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  //api call\n  const response = await fetch(\"http://localhost:8000/todos\");\n\n  if (response.ok) {\n    const todos = await response.json(); //array of todos that converts to json\n\n    return {\n      todos\n    }; //once a function that will turn back to action\n  }\n});\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    //updates the current state to the new state\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: true\n      }; //state as params that will add new todo to the arrays\n\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id === action.payload.id);\n    }\n  },\n  extraReducers: {\n    //thunk will dispatech a fullfilled action that will be handled by the reducer function\n    [getTodosAsync.pending]: (state, action) => {\n      console.log(\"fetching data ....\");\n    },\n    [getTodosAsync.fulfilled]: (state, action) => {\n      console.log(\"fetched data successfully!\");\n      return action.payload.todos;\n    }\n  }\n}); //returns bunch of action right off the actions objects\n\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions; //to add it to the store\n\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/Users/avinavshrestha/Desktop/react-redux-todo-app/starter/src/components/redux/todoSlice.js"],"names":["createSlice","createAsyncThunk","getTodosAsync","response","fetch","ok","todos","json","todoSlice","name","initialState","reducers","addTodo","state","action","newTodo","id","Date","now","title","payload","completed","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","extraReducers","pending","console","log","fulfilled","actions","reducer"],"mappings":"AAAA;AAEA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,qBAD2C,EAE3C,YAAY;AACV;AACA,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;;AACA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAApB,CADe,CACsB;;AACrC,WAAO;AAAED,MAAAA;AAAF,KAAP,CAFe,CAEG;AACnB;AACF,CAT0C,CAAtC;AAYP,MAAME,SAAS,GAAGR,WAAW,CAAC;AAC5BS,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAI5BC,EAAAA,QAAQ,EAAE;AACR;AACAC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL,EADU;AAEdC,QAAAA,KAAK,EAAEL,MAAM,CAACM,OAAP,CAAeD,KAFR;AAGdE,QAAAA,SAAS,EAAE;AAHG,OAAhB,CAD0B,CAM1B;;AACAR,MAAAA,KAAK,CAACS,IAAN,CAAWP,OAAX;AACD,KAVO;AAYRQ,IAAAA,cAAc,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMU,KAAK,GAAGX,KAAK,CAACY,SAAN,CAAiBC,IAAD,IAAUZ,MAAM,CAACM,OAAP,CAAeJ,EAAzC,CAAd;AACAH,MAAAA,KAAK,CAACW,KAAD,CAAL,CAAaH,SAAb,GAAyBP,MAAM,CAACM,OAAP,CAAeC,SAAxC;AACD,KAfO;AAgBRM,IAAAA,UAAU,EAAE,CAACd,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOD,KAAK,CAACe,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAACV,EAAL,KAAYF,MAAM,CAACM,OAAP,CAAeJ,EAAlD,CAAP;AACD;AAlBO,GAJkB;AAwB5Ba,EAAAA,aAAa,EAAE;AACb;AACA,KAAC3B,aAAa,CAAC4B,OAAf,GAAyB,CAACjB,KAAD,EAAQC,MAAR,KAAmB;AAC1CiB,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KAJY;AAKb,KAAC9B,aAAa,CAAC+B,SAAf,GAA2B,CAACpB,KAAD,EAAQC,MAAR,KAAmB;AAC5CiB,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,aAAOlB,MAAM,CAACM,OAAP,CAAed,KAAtB;AACD;AARY;AAxBa,CAAD,CAA7B,C,CAoCA;;AACA,OAAO,MAAM;AAAEM,EAAAA,OAAF;AAAWW,EAAAA,cAAX;AAA2BI,EAAAA;AAA3B,IAA0CnB,SAAS,CAAC0B,OAA1D,C,CAEP;;AACA,eAAe1B,SAAS,CAAC2B,OAAzB","sourcesContent":["//incharege updating and controlling the todo state\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n//the thunk function gets called by an component\nexport const getTodosAsync = createAsyncThunk(\n  \"todos/getTodosAsync\",\n  async () => {\n    //api call\n    const response = await fetch(\"http://localhost:8000/todos\");\n    if (response.ok) {\n      const todos = await response.json(); //array of todos that converts to json\n      return { todos }; //once a function that will turn back to action\n    }\n  }\n);\n\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n\n  reducers: {\n    //updates the current state to the new state\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: true,\n      };\n      //state as params that will add new todo to the arrays\n      state.push(newTodo);\n    },\n\n    toggleComplete: (state, action) => {\n      const index = state.findIndex((todo) => action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter((todo) => todo.id === action.payload.id);\n    },\n  },\n  extraReducers: {\n    //thunk will dispatech a fullfilled action that will be handled by the reducer function\n    [getTodosAsync.pending]: (state, action) => {\n      console.log(\"fetching data ....\");\n    },\n    [getTodosAsync.fulfilled]: (state, action) => {\n      console.log(\"fetched data successfully!\");\n      return action.payload.todos;\n    },\n  },\n});\n\n//returns bunch of action right off the actions objects\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\n\n//to add it to the store\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}