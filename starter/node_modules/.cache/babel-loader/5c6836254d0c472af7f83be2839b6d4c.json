{"ast":null,"code":"//incharege updating and controlling the todo state\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"; //the thunk function gets called by an component\n\nexport const getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  //api call\n  const response = await fetch(\"http://localhost:8000/todos\");\n\n  if (response.ok) {\n    const todos = await response.json(); //array of todos that converts to json\n\n    return {\n      todos\n    }; //once a function that will turn back to action that will be part of the payload\n  }\n}); //creates a bunch of actions\n\nexport const addTodoAsync = createAsyncThunk(\"todos/addTodoAsync\", async payload => {\n  const response = await fetch(\"http://localhost:8080/todos\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      title: payload.title\n    })\n  });\n\n  if (response.ok) {\n    const todo = await response.json();\n    return {\n      todo\n    };\n  }\n});\nexport const toggleCompleteAsync = createAsyncThunk(\"todos/completeTodoAsync\", async payload => {\n  const response = await fetch(\"http://localhost:8000/todos/${payload.id}\", {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      completed: payload.completed\n    })\n  });\n\n  if (response.ok) {\n    const todo = await response.json();\n    return {\n      id: todo.id,\n      completed: todo.completed\n    };\n  }\n});\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    //updates the current state to the new state\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: true\n      }; //state as params that will add new todo to the arrays\n\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    //thunk will dispatech a fullfilled action that will be handled by the reducer function\n    [getTodosAsync.pending]: (state, action) => {\n      console.log(\"fetching data ....\");\n    },\n    [getTodosAsync.fulfilled]: (state, action) => {\n      console.log(\"fetched data successfully!\");\n      return action.payload.todos; //state gets updated due to the payload update\n    },\n    [addTodoAsync.fulfilled]: (state, action) => {\n      state.push(action.payload.todo);\n    },\n    [toggleCompleteAsync.fulfilled]: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    }\n  }\n}); //returns bunch of action right off the actions objects\n\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions; //to add it to the store\n\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/Users/avinavshrestha/Desktop/react-redux-todo-app/starter/src/components/redux/todoSlice.js"],"names":["createSlice","createAsyncThunk","getTodosAsync","response","fetch","ok","todos","json","addTodoAsync","payload","method","headers","body","JSON","stringify","title","todo","toggleCompleteAsync","completed","id","todoSlice","name","initialState","reducers","addTodo","state","action","newTodo","Date","now","push","toggleComplete","index","findIndex","deleteTodo","filter","extraReducers","pending","console","log","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["//incharege updating and controlling the todo state\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n//the thunk function gets called by an component\nexport const getTodosAsync = createAsyncThunk(\n  \"todos/getTodosAsync\",\n  async () => {\n    //api call\n    const response = await fetch(\"http://localhost:8000/todos\");\n    if (response.ok) {\n      const todos = await response.json(); //array of todos that converts to json\n      return { todos }; //once a function that will turn back to action that will be part of the payload\n    }\n  }\n);\n\n//creates a bunch of actions\nexport const addTodoAsync = createAsyncThunk(\n  \"todos/addTodoAsync\",\n  async (payload) => {\n    const response = await fetch(\"http://localhost:8080/todos\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ title: payload.title }),\n    });\n\n    if (response.ok) {\n      const todo = await response.json();\n      return { todo };\n    }\n  }\n);\n\nexport const toggleCompleteAsync = createAsyncThunk(\n  \"todos/completeTodoAsync\",\n  async (payload) => {\n    const response = await fetch(\"http://localhost:8000/todos/${payload.id}\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ completed: payload.completed }),\n    });\n    if (response.ok) {\n      const todo = await response.json();\n      return { id: todo.id, completed: todo.completed };\n    }\n  }\n);\n\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n\n  reducers: {\n    //updates the current state to the new state\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        completed: true,\n      };\n      //state as params that will add new todo to the arrays\n      state.push(newTodo);\n    },\n\n    toggleComplete: (state, action) => {\n      const index = state.findIndex((todo) => action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter((todo) => todo.id !== action.payload.id);\n    },\n  },\n  extraReducers: {\n    //thunk will dispatech a fullfilled action that will be handled by the reducer function\n    [getTodosAsync.pending]: (state, action) => {\n      console.log(\"fetching data ....\");\n    },\n    [getTodosAsync.fulfilled]: (state, action) => {\n      console.log(\"fetched data successfully!\");\n      return action.payload.todos; //state gets updated due to the payload update\n    },\n    [addTodoAsync.fulfilled]: (state, action) => {\n      state.push(action.payload.todo);\n    },\n    [toggleCompleteAsync.fulfilled]: (state, action) => {\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n  },\n});\n\n//returns bunch of action right off the actions objects\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\n\n//to add it to the store\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}